# Inspections
inspection.inconsistent.argument.matchers=Both matcher and non-matcher arguments are used.
inspection.verification.mode.value.less.than.allowed=The argument value of a(n) <code>{0}()</code> call must be {1} or greater.
inspection.timeout.value.more.than.allowed=The timeout value must be lower than the user-defined max threshold: {0}.
inspection.timeout.max.threshold.config.title=Mockito.timeout() max threshold
inspection.captor.field.must.be.argument.captor=A @Captor field must be of the type ArgumentCaptor.
inspection.captor.field.init.not.required=Explicit initialization of a @Captor field can be omitted.
quick.fix.captor.field.family.name=@Captor fixes
quick.fix.captor.field.remove.init=Remove initializer
quick.fix.captor.field.convert.to.argumentcaptor=Convert field type to ArgumentCaptor<>
inspection.times.zero.can.be.replaced.with.never=This call can be replaced with Mockito.never().
inspection.times.one.can.be.omitted=This call can be omitted since 'times(1)' is the default behaviour.
quick.fix.times.family.name=Mockito.times() fixes
quick.fix.times.zero.replace.with.never=Replace with Mockito.never()
quick.fix.times.one.delete.call=Delete call to Mockito.times(1)
inspection.option.report.times.zero.to.never=Report that times(0) can be replaced with never()
inspection.option.report.times.one.to.omit=Report that times(1) calls can be omitted
inspection.extra.interfaces.not.interface=The referenced type is not an interface. MockSettings#extraInterfaces() must be provided only interface types.
inspection.annotation.extra.interfaces.not.interface=The referenced type is not an interface. @Mock#extraInterfaces() must be provided only interface types.
inspection.method.call.no.argument.specified={0}() is not provided any argument. At least one object must be passed.
inspection.non.mockable.type=This type is not mockable by Mockito. Such types include primitive types, Class, String, and the wrapper types of primitives.
inspection.non.mockable.type.do.not.mock.reason=This type is not mockable since a type in the class hierarchy is annotated as @DoNotMock. The reason: {0}
inspection.non.mockable.type.do.not.mock.no.reason=This type is not mockable since a type in the class hierarchy is annotated as @DoNotMock. No reason provided.
inspection.call.to.reset={0}.reset() is called. It is recommended to create new mocks instead.
inspection.invalid.checked.exception.in.stubbing=This checked exception is invalid for the stubbed method.\nEach checked exception in a thenThrow()/doThrow()/willThrow() call must match one of the exceptions in the stubbed method's 'throws' clause.
inspection.can.merge.with.previous.consecutive.calls=This call can be merged with previous consecutive <code>{0}</code> calls.
quick.fix.merge.with.previous.consecutive.calls=Merge {0} calls
quick.fix.merge.with.previous.consecutive.calls.and.convert.params=Merge calls, convert parameters to {0}
quick.fix.family.simplify.consecutive.stubbing.calls=Consecutive *Return calls can be simplified
quick.fix.to.class.objects=Class objects
quick.fix.to.throwables=Throwables
inspection.option.enforce.stubbing.and.verification.label=Enforce stubbing and verification via:
inspection.stubbing.and.verification.must.be.performed.via.x=Stubbing/verification must be performed via {0}
quick.fix.add.exception.to.method.throws.clause=Add exception to throws clause
inspection.in.order.is.used.only.once=This InOrder variable is used in only one verification. A single verification is always in order.
inspection.no.in.order.verification.for.mock=No InOrder verification is called on this mock.
inspection.mock.is.not.configured.in.in.order=This mock is not configured in 'Mockito.inOrder()'.
inspection.void.method.is.stubbed.to.do.nothing=The stubbed method, <code>{0}()</code>, has a non-void return type. Only void methods can do nothing.
inspection.non.void.method.is.stubbed.with.return.value=The stubbed method, <code>{0}()</code>, has void return type, but it is stubbed with a return value.

# Framework integration
inspection.class.extends.not.extensible=This class extends a class annotated as @NotExtensible.
inspection.interface.extends.not.extensible=This interface extends another interface annotated as @NotExtensible.

# Migration aid v4
inspection.migration.aid.v4.use.argument.matchers.instead.of.matchers='Matchers' is removed in Mockito v4. Use ArgumentMatchers instead.
quick.fix.family.migration.aid.v4=Migration aids (Mockito v4)
quick.fix.migration.aid.v4.use.argument.matchers.instead.of.matchers=Use matcher from ArgumentMatchers
inspection.migration.aid.v4.use.any=<code>{0}()</code> is removed in Mockito v4. Use 'ArgumentMatchers.any()' instead.
inspection.migration.aid.v4.use.any.collection.type=<code>{0}()</code> is removed in Mockito v4. Use the 'anyX()' variant of this matcher.
quick.fix.migration.aid.v4.replace.with=Replace with ArgumentMatchers.{0}()
inspection.migration.aid.v4.use.non.parameterized.null.matcher=The parameterized variant of this matcher is removed in Mockito v4. Use the non-parameterized variant instead.
quick.fix.migration.aid.v4.use.non.parameterized.null.matcher=Remove matcher argument
inspection.migration.aid.v4.mocked.static.verify='verify(VerificationMode, Verification)' is removed in Mockito v4. Use 'verify(Verification, VerificationMode)' instead.
quick.fix.migration.aid.v4.switch.mocked.static.verify.args=Use non-deprecated 'verify()'
inspection.migration.aid.v4.use.no.more.interactions='verifyZeroInteractions()' is removed in Mockito v4. Use 'verifyNoMoreInteractions()' instead.
quick.fix.migration.aid.v4.replace.zero.interactions.with.no.more.interactions=Replace with verifyNoMoreInteractions()
inspection.migration.aid.v4.plugin.configuration.annotation.engine=org.mockito.configuration.AnnotationEngine is removed in Mockito v4. Use org.mockito.plugins.AnnotationEngine instead.
quick.fix.migration.aid.v4.replace.with.org.mockito.plugins.AnnotationEngine=Replace with org.mockito.plugins.AnnotationEngine
inspection.migration.aid.v4.plugin.instantiator.provider=InstantiatorProvider is removed in Mockito v4. Use InstantiatorProvider2 instead.
quick.fix.migration.aid.v4.replace.with.instantiator.provider.2=Replace with InstantiatorProvider2
inspection.migration.aid.v4.org.mockito.runners.is.removed=Runners in the org.mockito.runners package are removed in Mockito v4. Use org.mockito.junit.MockitoJUnitRunner instead.
quick.fix.migration.aid.v4.replace.with.mockito.junit.runner=Replace with org.mockito.junit.MockitoJUnitRunner

# Intentions
mockito.intention.category=Mockito
intention.convert.mocking.field.to.call=Convert to Mockito.{0}()
intention.convert.mocking.field.to.call.generic=Convert to mocking call
intention.convert.mocking.field.to.call.family=Convert @Mock/@Spy field to mock()/spy() call
intention.convert.mocking.field.to.call.select.method=Select Method
intention.select.target.class=Select Target Class
#{0} is the annotation name: @Spy or @Mock
intention.convert.x.call.to.field=Convert to {0} field
#{0} is the mocking method name: spy or mock. {1} is the annotation name: @Spy or @Mock
intention.convert.x.call.to.y.field.family=Convert Mockito.{0}() call to {1} field
intention.convert.x.call.to.field.conversion.cannot.happen.message=The conversion to a {0} field cannot happen because field {1} is already defined in the class.
intention.convert.x.call.to.field.conversion.cannot.happen.title=Field with Provided Name Is Already Defined
intention.convert.throw.arguments.to.x=Convert arguments to {0}
intention.convert.throw.arguments.generic=Convert arguments
intention.convert.throw.arguments.to.x.family=Convert *Throw() stubbing method arguments
intention.convert.verification.to=Convert verification(s) to...
intention.convert.verification.x.to.family=Convert {0} based verification
intention.convert.verification.select.target=Target Verification
intention.convert.verification.bddmockito.with.inorder=BDDMockito.then() with InOrder
intention.convert.verification.bddmockito.without.inorder=BDDMockito.then() without InOrder
action.no.available.action=No action available
intention.convert.stubbing.to=Convert stubbing(s) to...
intention.convert.stubbing.x.to.family=Convert {0} based stubbing
